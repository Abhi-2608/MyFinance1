// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../helpers/active_user.dart';
import '../../models/categories_model.dart';
import '../../models/group_model.dart';
import '../../models/group_transaction_model.dart';
import '../../models/personal_transaction.dart';
import '../../models/user_contacts_object_box.dart';
import '../../models/user_group_entity_model.dart';
import '../../models/user_transaction.dart';
import '../../models/users.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4592610630340206408),
      name: 'ActiveUser',
      lastPropertyId: const obx_int.IdUid(3, 1162542413672179316),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2985366399970573488),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3130950302305962207),
            name: 'lastActivityTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1162542413672179316),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 6927739546908584081),
            relationTarget: 'Users')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1907906658165811967),
      name: 'CategoriesModel',
      lastPropertyId: const obx_int.IdUid(4, 8069883561412357779),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2362562661721401825),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8998437982253619357),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6077040380040914783),
            name: 'lastAccessed',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8069883561412357779),
            name: 'serverId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3523655912915669180),
      name: 'GroupTransactionModel',
      lastPropertyId: const obx_int.IdUid(8, 4456986581451545328),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 134479426838856467),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5832138770428960215),
            name: 'creatorId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 586657737734109026),
            name: 'serverId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 127974317587321962),
            name: 'amount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 538839864693460078),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1080059024522930949),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8866074925907869392),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 3610860422873397201),
            relationTarget: 'Groups'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4456986581451545328),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2674786095933439799),
            relationTarget: 'CategoriesModel')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5384355861399032122),
            name: 'transactionParticipants',
            targetId: const obx_int.IdUid(9, 6838203135665877011))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2903044715664348888),
      name: 'Groups',
      lastPropertyId: const obx_int.IdUid(6, 344129778156617439),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1966877858275218422),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8031532337111343250),
            name: 'serverId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2982006841536573658),
            name: 'groupName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5047648051954172509),
            name: 'groupProfilePic',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3380351540226227894),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 344129778156617439),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3366968401068556798),
            name: 'participants',
            targetId: const obx_int.IdUid(9, 6838203135665877011))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8642409169971033274),
      name: 'PersonalTransaction',
      lastPropertyId: const obx_int.IdUid(11, 604760653372862066),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5360498146069746486),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4654870436005155062),
            name: 'serverId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5891552488860789365),
            name: 'transactionType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 975800457814538780),
            name: 'accNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 99187794971593792),
            name: 'smsBody',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5468746982989739339),
            name: 'amount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 898535128547292957),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2404391678589564999),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4151197304642664265),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9149079890277447566),
            name: 'transactionIdId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 4219849436321009096),
            relationTarget: 'UserTransaction'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 604760653372862066),
            name: 'groupTransactionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 731610041434081532),
            relationTarget: 'GroupTransactionModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 5172115406556042158),
      name: 'UserContactsObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(4, 2662351892296052798),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4746395829122692247),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1268141023205588166),
            name: 'contact_user_id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8124348978296003775),
            name: 'user_id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2662351892296052798),
            name: 'contact_name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 6119506772473639810),
            name: 'users',
            targetId: const obx_int.IdUid(9, 6838203135665877011))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 7845594981231642002),
      name: 'UserGroupEntityModel',
      lastPropertyId: const obx_int.IdUid(9, 4270524095038577464),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7772575883190505216),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8669582731349118813),
            name: 'entityId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5670355978118172546),
            name: 'lastActivityTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2111778956392474925),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 947421033859741866),
            name: 'profilePicture',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5770510604320702762),
            name: 'amount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4488686182766578315),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6618090533707112070),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4270524095038577464),
            name: 'dbType',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 492394358669671165),
      name: 'UserTransaction',
      lastPropertyId: const obx_int.IdUid(15, 3845314861717826952),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5908734136588606102),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2474625298475804333),
            name: 'trUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7462654606662929985),
            name: 'laneUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2286974248564693529),
            name: 'daneUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2423308745719452968),
            name: 'amount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4559425372969184757),
            name: 'paymentStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8065993934352459958),
            name: 'confirmation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6308603933126744519),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 9165912181611436909),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4753223621575794779),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2691063986725760954),
            name: 'serverId',
            type: 6,
            flags: 40,
            indexId: const obx_int.IdUid(6, 6302830928546031572)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4124711685713882299),
            name: 'settleTransactionId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1046082445702707064),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 5633232348944667609),
            relationTarget: 'Users'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4339383970860595172),
            name: 'groupTransactionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 1905050922887042916),
            relationTarget: 'GroupTransactionModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3845314861717826952),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 8895177240547315014),
            relationTarget: 'CategoriesModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 6838203135665877011),
      name: 'Users',
      lastPropertyId: const obx_int.IdUid(9, 1773932116342480),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2548020432127978578),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3819986985920465742),
            name: 'onboarded_at',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2752489486189166226),
            name: 'full_name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3721921652634198315),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8265823719976723641),
            name: 'pincode',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7345464583468560638),
            name: 'tapCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6004776519775985514),
            name: 'onBoardedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2697672510074469769),
            name: 'phone_no',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1773932116342480),
            name: 'serverId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 6838203135665877011),
      lastIndexId: const obx_int.IdUid(9, 8895177240547315014),
      lastRelationId: const obx_int.IdUid(3, 6119506772473639810),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ActiveUser: obx_int.EntityDefinition<ActiveUser>(
        model: _entities[0],
        toOneRelations: (ActiveUser object) => [object.user],
        toManyRelations: (ActiveUser object) => {},
        getId: (ActiveUser object) => object.id,
        setId: (ActiveUser object, int id) {
          object.id = id;
        },
        objectToFB: (ActiveUser object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastActivityTime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final lastActivityTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final userParam = obx.ToOne<Users>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = ActiveUser(
              id: idParam,
              lastActivityTime: lastActivityTimeParam,
              user: userParam);
          object.user.attach(store);
          return object;
        }),
    CategoriesModel: obx_int.EntityDefinition<CategoriesModel>(
        model: _entities[1],
        toOneRelations: (CategoriesModel object) => [],
        toManyRelations: (CategoriesModel object) => {},
        getId: (CategoriesModel object) => object.id,
        setId: (CategoriesModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoriesModel object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, messageOffset);
          fbb.addInt64(2, object.lastAccessed.millisecondsSinceEpoch);
          fbb.addInt64(3, object.serverId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final serverIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final lastAccessedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = CategoriesModel(
              id: idParam,
              serverId: serverIdParam,
              lastAccessed: lastAccessedParam,
              message: messageParam);

          return object;
        }),
    GroupTransactionModel: obx_int.EntityDefinition<GroupTransactionModel>(
        model: _entities[2],
        toOneRelations: (GroupTransactionModel object) =>
            [object.group, object.category],
        toManyRelations: (GroupTransactionModel object) => {
              obx_int.RelInfo<GroupTransactionModel>.toMany(1, object.id):
                  object.transactionParticipants
            },
        getId: (GroupTransactionModel object) => object.id,
        setId: (GroupTransactionModel object, int id) {
          object.id = id;
        },
        objectToFB: (GroupTransactionModel object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.creatorId);
          fbb.addInt64(2, object.serverId);
          fbb.addInt64(3, object.amount);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.group.targetId);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final creatorIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final groupParam = obx.ToOne<Groups>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final categoryParam = obx.ToOne<CategoriesModel>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = GroupTransactionModel(
              id: idParam,
              serverId: serverIdParam,
              creatorId: creatorIdParam,
              amount: amountParam,
              group: groupParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              category: categoryParam);
          object.group.attach(store);
          object.category.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<GroupTransactionModel>(
              object.transactionParticipants,
              store,
              obx_int.RelInfo<GroupTransactionModel>.toMany(1, object.id));
          return object;
        }),
    Groups: obx_int.EntityDefinition<Groups>(
        model: _entities[3],
        toOneRelations: (Groups object) => [],
        toManyRelations: (Groups object) =>
            {obx_int.RelInfo<Groups>.toMany(2, object.id): object.participants},
        getId: (Groups object) => object.id,
        setId: (Groups object, int id) {
          object.id = id;
        },
        objectToFB: (Groups object, fb.Builder fbb) {
          final groupNameOffset = fbb.writeString(object.groupName);
          final groupProfilePicOffset = fbb.writeString(object.groupProfilePic);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverId);
          fbb.addOffset(2, groupNameOffset);
          fbb.addOffset(3, groupProfilePicOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final groupNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final groupProfilePicParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = Groups(
              id: idParam,
              serverId: serverIdParam,
              groupName: groupNameParam,
              groupProfilePic: groupProfilePicParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<Groups>(object.participants,
              store, obx_int.RelInfo<Groups>.toMany(2, object.id));
          return object;
        }),
    PersonalTransaction: obx_int.EntityDefinition<PersonalTransaction>(
        model: _entities[4],
        toOneRelations: (PersonalTransaction object) =>
            [object.transactionId, object.groupTransaction],
        toManyRelations: (PersonalTransaction object) => {},
        getId: (PersonalTransaction object) => object.id,
        setId: (PersonalTransaction object, int id) {
          object.id = id;
        },
        objectToFB: (PersonalTransaction object, fb.Builder fbb) {
          final transactionTypeOffset = fbb.writeString(object.transactionType);
          final accNumberOffset = fbb.writeString(object.accNumber);
          final smsBodyOffset =
              object.smsBody == null ? null : fbb.writeString(object.smsBody!);
          final amountOffset = fbb.writeString(object.amount);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(12);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.serverId);
          fbb.addOffset(2, transactionTypeOffset);
          fbb.addOffset(3, accNumberOffset);
          fbb.addOffset(4, smsBodyOffset);
          fbb.addOffset(5, amountOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.transactionId.targetId);
          fbb.addInt64(10, object.groupTransaction.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final smsBodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final serverIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final transactionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final accNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final object = PersonalTransaction(
              id: idParam,
              smsBody: smsBodyParam,
              serverId: serverIdParam,
              transactionType: transactionTypeParam,
              amount: amountParam,
              accNumber: accNumberParam,
              createdAt: createdAtParam,
              description: descriptionParam,
              updatedAt: updatedAtParam);
          object.transactionId.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.transactionId.attach(store);
          object.groupTransaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.groupTransaction.attach(store);
          return object;
        }),
    UserContactsObjectBoxModel: obx_int.EntityDefinition<
            UserContactsObjectBoxModel>(
        model: _entities[5],
        toOneRelations: (UserContactsObjectBoxModel object) => [],
        toManyRelations: (UserContactsObjectBoxModel object) => {
              obx_int.RelInfo<UserContactsObjectBoxModel>.toMany(3, object.id!):
                  object.users
            },
        getId: (UserContactsObjectBoxModel object) => object.id,
        setId: (UserContactsObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserContactsObjectBoxModel object, fb.Builder fbb) {
          final contact_nameOffset = fbb.writeString(object.contact_name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.contact_user_id);
          fbb.addInt64(2, object.user_id);
          fbb.addOffset(3, contact_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final contact_user_idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final user_idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final contact_nameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = UserContactsObjectBoxModel(
              id: idParam,
              contact_user_id: contact_user_idParam,
              user_id: user_idParam,
              contact_name: contact_nameParam);
          obx_int.InternalToManyAccess.setRelInfo<UserContactsObjectBoxModel>(
              object.users,
              store,
              obx_int.RelInfo<UserContactsObjectBoxModel>.toMany(
                  3, object.id!));
          return object;
        }),
    UserGroupEntityModel: obx_int.EntityDefinition<UserGroupEntityModel>(
        model: _entities[6],
        toOneRelations: (UserGroupEntityModel object) => [],
        toManyRelations: (UserGroupEntityModel object) => {},
        getId: (UserGroupEntityModel object) => object.id,
        setId: (UserGroupEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserGroupEntityModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final profilePictureOffset = object.profilePicture == null
              ? null
              : fbb.writeString(object.profilePicture!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.entityId);
          fbb.addInt64(2, object.lastActivityTime.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, profilePictureOffset);
          fbb.addInt64(5, object.amount);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.dbType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final entityIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final lastActivityTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final profilePictureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = UserGroupEntityModel(
              id: idParam,
              entityId: entityIdParam,
              amount: amountParam,
              lastActivityTime: lastActivityTimeParam,
              name: nameParam,
              profilePicture: profilePictureParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam)
            ..dbType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    UserTransaction: obx_int.EntityDefinition<UserTransaction>(
        model: _entities[7],
        toOneRelations: (UserTransaction object) =>
            [object.user, object.groupTransaction, object.category],
        toManyRelations: (UserTransaction object) => {},
        getId: (UserTransaction object) => object.id,
        setId: (UserTransaction object, int id) {
          object.id = id;
        },
        objectToFB: (UserTransaction object, fb.Builder fbb) {
          final amountOffset = fbb.writeString(object.amount);
          final paymentStatusOffset = fbb.writeString(object.paymentStatus);
          final confirmationOffset = object.confirmation == null
              ? null
              : fbb.writeString(object.confirmation!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.trUserId);
          fbb.addInt64(2, object.laneUserId);
          fbb.addInt64(3, object.daneUserId);
          fbb.addOffset(4, amountOffset);
          fbb.addOffset(5, paymentStatusOffset);
          fbb.addOffset(6, confirmationOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.dueDate?.millisecondsSinceEpoch);
          fbb.addInt64(10, object.serverId);
          fbb.addInt64(11, object.settleTransactionId);
          fbb.addInt64(12, object.user.targetId);
          fbb.addInt64(13, object.groupTransaction.targetId);
          fbb.addInt64(14, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final serverIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final trUserIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final laneUserIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final daneUserIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final paymentStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final confirmationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final dueDateParam = dueDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dueDateValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final settleTransactionIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final object = UserTransaction(
              id: idParam,
              serverId: serverIdParam,
              trUserId: trUserIdParam,
              laneUserId: laneUserIdParam,
              daneUserId: daneUserIdParam,
              amount: amountParam,
              paymentStatus: paymentStatusParam,
              confirmation: confirmationParam,
              createdAt: createdAtParam,
              dueDate: dueDateParam,
              updatedAt: updatedAtParam,
              settleTransactionId: settleTransactionIdParam);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.user.attach(store);
          object.groupTransaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.groupTransaction.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.category.attach(store);
          return object;
        }),
    Users: obx_int.EntityDefinition<Users>(
        model: _entities[8],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final full_nameOffset = object.full_name == null
              ? null
              : fbb.writeString(object.full_name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phone_noOffset = fbb.writeString(object.phone_no);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.onboarded_at);
          fbb.addOffset(2, full_nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addInt64(4, object.pincode);
          fbb.addInt64(5, object.tapCount);
          fbb.addInt64(6, object.onBoardedAt.millisecondsSinceEpoch);
          fbb.addOffset(7, phone_noOffset);
          fbb.addInt64(8, object.serverId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final phone_noParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final onBoardedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final tapCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final full_nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final pincodeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Users(
              id: idParam,
              serverId: serverIdParam,
              phone_no: phone_noParam,
              onBoardedAt: onBoardedAtParam,
              tapCount: tapCountParam,
              full_name: full_nameParam,
              email: emailParam,
              pincode: pincodeParam)
            ..onboarded_at =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ActiveUser] entity fields to define ObjectBox queries.
class ActiveUser_ {
  /// see [ActiveUser.id]
  static final id =
      obx.QueryIntegerProperty<ActiveUser>(_entities[0].properties[0]);

  /// see [ActiveUser.lastActivityTime]
  static final lastActivityTime =
      obx.QueryDateProperty<ActiveUser>(_entities[0].properties[1]);

  /// see [ActiveUser.user]
  static final user =
      obx.QueryRelationToOne<ActiveUser, Users>(_entities[0].properties[2]);
}

/// [CategoriesModel] entity fields to define ObjectBox queries.
class CategoriesModel_ {
  /// see [CategoriesModel.id]
  static final id =
      obx.QueryIntegerProperty<CategoriesModel>(_entities[1].properties[0]);

  /// see [CategoriesModel.message]
  static final message =
      obx.QueryStringProperty<CategoriesModel>(_entities[1].properties[1]);

  /// see [CategoriesModel.lastAccessed]
  static final lastAccessed =
      obx.QueryDateProperty<CategoriesModel>(_entities[1].properties[2]);

  /// see [CategoriesModel.serverId]
  static final serverId =
      obx.QueryIntegerProperty<CategoriesModel>(_entities[1].properties[3]);
}

/// [GroupTransactionModel] entity fields to define ObjectBox queries.
class GroupTransactionModel_ {
  /// see [GroupTransactionModel.id]
  static final id = obx.QueryIntegerProperty<GroupTransactionModel>(
      _entities[2].properties[0]);

  /// see [GroupTransactionModel.creatorId]
  static final creatorId = obx.QueryIntegerProperty<GroupTransactionModel>(
      _entities[2].properties[1]);

  /// see [GroupTransactionModel.serverId]
  static final serverId = obx.QueryIntegerProperty<GroupTransactionModel>(
      _entities[2].properties[2]);

  /// see [GroupTransactionModel.amount]
  static final amount = obx.QueryIntegerProperty<GroupTransactionModel>(
      _entities[2].properties[3]);

  /// see [GroupTransactionModel.createdAt]
  static final createdAt =
      obx.QueryDateProperty<GroupTransactionModel>(_entities[2].properties[4]);

  /// see [GroupTransactionModel.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<GroupTransactionModel>(_entities[2].properties[5]);

  /// see [GroupTransactionModel.group]
  static final group = obx.QueryRelationToOne<GroupTransactionModel, Groups>(
      _entities[2].properties[6]);

  /// see [GroupTransactionModel.category]
  static final category =
      obx.QueryRelationToOne<GroupTransactionModel, CategoriesModel>(
          _entities[2].properties[7]);

  /// see [GroupTransactionModel.transactionParticipants]
  static final transactionParticipants =
      obx.QueryRelationToMany<GroupTransactionModel, Users>(
          _entities[2].relations[0]);
}

/// [Groups] entity fields to define ObjectBox queries.
class Groups_ {
  /// see [Groups.id]
  static final id =
      obx.QueryIntegerProperty<Groups>(_entities[3].properties[0]);

  /// see [Groups.serverId]
  static final serverId =
      obx.QueryIntegerProperty<Groups>(_entities[3].properties[1]);

  /// see [Groups.groupName]
  static final groupName =
      obx.QueryStringProperty<Groups>(_entities[3].properties[2]);

  /// see [Groups.groupProfilePic]
  static final groupProfilePic =
      obx.QueryStringProperty<Groups>(_entities[3].properties[3]);

  /// see [Groups.createdAt]
  static final createdAt =
      obx.QueryDateProperty<Groups>(_entities[3].properties[4]);

  /// see [Groups.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<Groups>(_entities[3].properties[5]);

  /// see [Groups.participants]
  static final participants =
      obx.QueryRelationToMany<Groups, Users>(_entities[3].relations[0]);
}

/// [PersonalTransaction] entity fields to define ObjectBox queries.
class PersonalTransaction_ {
  /// see [PersonalTransaction.id]
  static final id =
      obx.QueryIntegerProperty<PersonalTransaction>(_entities[4].properties[0]);

  /// see [PersonalTransaction.serverId]
  static final serverId =
      obx.QueryIntegerProperty<PersonalTransaction>(_entities[4].properties[1]);

  /// see [PersonalTransaction.transactionType]
  static final transactionType =
      obx.QueryStringProperty<PersonalTransaction>(_entities[4].properties[2]);

  /// see [PersonalTransaction.accNumber]
  static final accNumber =
      obx.QueryStringProperty<PersonalTransaction>(_entities[4].properties[3]);

  /// see [PersonalTransaction.smsBody]
  static final smsBody =
      obx.QueryStringProperty<PersonalTransaction>(_entities[4].properties[4]);

  /// see [PersonalTransaction.amount]
  static final amount =
      obx.QueryStringProperty<PersonalTransaction>(_entities[4].properties[5]);

  /// see [PersonalTransaction.description]
  static final description =
      obx.QueryStringProperty<PersonalTransaction>(_entities[4].properties[6]);

  /// see [PersonalTransaction.createdAt]
  static final createdAt =
      obx.QueryDateProperty<PersonalTransaction>(_entities[4].properties[7]);

  /// see [PersonalTransaction.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<PersonalTransaction>(_entities[4].properties[8]);

  /// see [PersonalTransaction.transactionId]
  static final transactionId =
      obx.QueryRelationToOne<PersonalTransaction, UserTransaction>(
          _entities[4].properties[9]);

  /// see [PersonalTransaction.groupTransaction]
  static final groupTransaction =
      obx.QueryRelationToOne<PersonalTransaction, GroupTransactionModel>(
          _entities[4].properties[10]);
}

/// [UserContactsObjectBoxModel] entity fields to define ObjectBox queries.
class UserContactsObjectBoxModel_ {
  /// see [UserContactsObjectBoxModel.id]
  static final id = obx.QueryIntegerProperty<UserContactsObjectBoxModel>(
      _entities[5].properties[0]);

  /// see [UserContactsObjectBoxModel.contact_user_id]
  static final contact_user_id =
      obx.QueryIntegerProperty<UserContactsObjectBoxModel>(
          _entities[5].properties[1]);

  /// see [UserContactsObjectBoxModel.user_id]
  static final user_id = obx.QueryIntegerProperty<UserContactsObjectBoxModel>(
      _entities[5].properties[2]);

  /// see [UserContactsObjectBoxModel.contact_name]
  static final contact_name =
      obx.QueryStringProperty<UserContactsObjectBoxModel>(
          _entities[5].properties[3]);

  /// see [UserContactsObjectBoxModel.users]
  static final users =
      obx.QueryRelationToMany<UserContactsObjectBoxModel, Users>(
          _entities[5].relations[0]);
}

/// [UserGroupEntityModel] entity fields to define ObjectBox queries.
class UserGroupEntityModel_ {
  /// see [UserGroupEntityModel.id]
  static final id = obx.QueryIntegerProperty<UserGroupEntityModel>(
      _entities[6].properties[0]);

  /// see [UserGroupEntityModel.entityId]
  static final entityId = obx.QueryIntegerProperty<UserGroupEntityModel>(
      _entities[6].properties[1]);

  /// see [UserGroupEntityModel.lastActivityTime]
  static final lastActivityTime =
      obx.QueryDateProperty<UserGroupEntityModel>(_entities[6].properties[2]);

  /// see [UserGroupEntityModel.name]
  static final name =
      obx.QueryStringProperty<UserGroupEntityModel>(_entities[6].properties[3]);

  /// see [UserGroupEntityModel.profilePicture]
  static final profilePicture =
      obx.QueryStringProperty<UserGroupEntityModel>(_entities[6].properties[4]);

  /// see [UserGroupEntityModel.amount]
  static final amount = obx.QueryIntegerProperty<UserGroupEntityModel>(
      _entities[6].properties[5]);

  /// see [UserGroupEntityModel.createdAt]
  static final createdAt =
      obx.QueryDateProperty<UserGroupEntityModel>(_entities[6].properties[6]);

  /// see [UserGroupEntityModel.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<UserGroupEntityModel>(_entities[6].properties[7]);

  /// see [UserGroupEntityModel.dbType]
  static final dbType = obx.QueryIntegerProperty<UserGroupEntityModel>(
      _entities[6].properties[8]);
}

/// [UserTransaction] entity fields to define ObjectBox queries.
class UserTransaction_ {
  /// see [UserTransaction.id]
  static final id =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[0]);

  /// see [UserTransaction.trUserId]
  static final trUserId =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[1]);

  /// see [UserTransaction.laneUserId]
  static final laneUserId =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[2]);

  /// see [UserTransaction.daneUserId]
  static final daneUserId =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[3]);

  /// see [UserTransaction.amount]
  static final amount =
      obx.QueryStringProperty<UserTransaction>(_entities[7].properties[4]);

  /// see [UserTransaction.paymentStatus]
  static final paymentStatus =
      obx.QueryStringProperty<UserTransaction>(_entities[7].properties[5]);

  /// see [UserTransaction.confirmation]
  static final confirmation =
      obx.QueryStringProperty<UserTransaction>(_entities[7].properties[6]);

  /// see [UserTransaction.createdAt]
  static final createdAt =
      obx.QueryDateProperty<UserTransaction>(_entities[7].properties[7]);

  /// see [UserTransaction.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<UserTransaction>(_entities[7].properties[8]);

  /// see [UserTransaction.dueDate]
  static final dueDate =
      obx.QueryDateProperty<UserTransaction>(_entities[7].properties[9]);

  /// see [UserTransaction.serverId]
  static final serverId =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[10]);

  /// see [UserTransaction.settleTransactionId]
  static final settleTransactionId =
      obx.QueryIntegerProperty<UserTransaction>(_entities[7].properties[11]);

  /// see [UserTransaction.user]
  static final user = obx.QueryRelationToOne<UserTransaction, Users>(
      _entities[7].properties[12]);

  /// see [UserTransaction.groupTransaction]
  static final groupTransaction =
      obx.QueryRelationToOne<UserTransaction, GroupTransactionModel>(
          _entities[7].properties[13]);

  /// see [UserTransaction.category]
  static final category =
      obx.QueryRelationToOne<UserTransaction, CategoriesModel>(
          _entities[7].properties[14]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = obx.QueryIntegerProperty<Users>(_entities[8].properties[0]);

  /// see [Users.onboarded_at]
  static final onboarded_at =
      obx.QueryIntegerProperty<Users>(_entities[8].properties[1]);

  /// see [Users.full_name]
  static final full_name =
      obx.QueryStringProperty<Users>(_entities[8].properties[2]);

  /// see [Users.email]
  static final email =
      obx.QueryStringProperty<Users>(_entities[8].properties[3]);

  /// see [Users.pincode]
  static final pincode =
      obx.QueryIntegerProperty<Users>(_entities[8].properties[4]);

  /// see [Users.tapCount]
  static final tapCount =
      obx.QueryIntegerProperty<Users>(_entities[8].properties[5]);

  /// see [Users.onBoardedAt]
  static final onBoardedAt =
      obx.QueryDateProperty<Users>(_entities[8].properties[6]);

  /// see [Users.phone_no]
  static final phone_no =
      obx.QueryStringProperty<Users>(_entities[8].properties[7]);

  /// see [Users.serverId]
  static final serverId =
      obx.QueryIntegerProperty<Users>(_entities[8].properties[8]);
}
